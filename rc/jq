# intersect 2 sets, passed as 2 members of an array eg.
#  input:
#   $ echo '[[1, 2, 3, 4], [5, 6, 4, 1]]' | jq '. | intersect'
#  output:
#  [1, 4]
def intersect:
    (.[0] | unique) + (.[1] | unique) | sort as $s
    | reduce range(1; $s|length) as $i
        ([]; if $s[$i-1]  == $s[$i] then (. + [$s[$i]]) else . end);

# merge multiple maps in an array into 1 big map
#  input:
#   $ echo '[{"foo": 1}, {"bar": 2}]' | jq '. | merge'
#  output:
#   {"foo": 1, "bar": 2}
def merge: reduce .[] as $sub_map ({}; . + $sub_map);

# make a map with some given value with keys from given array
#  input:
#   $ echo '["foo", "bar"]' | jq '. | mapify(5)'
#  output:
#   {"foo": 5, "bar": 5}
def mapify(v): reduce .[] as $str ({}; . + {($str): v});

# find value of a key recursively
#  input:
#   $ echo '[{"a": {"b" : 4}}, {"c" : {"d": 16}}]' | jq '. | find(.d)'
#  output:
#   16
def find(f): .. | select(type=="object" and f) | f;

# pm_nice
# makes a nice looking compact representation of patch_map
def pm_nice:
  (. | fromjson | to_entries
     | map({key: .key | fromjson | .patchId, value: .value | fromjson})
     | from_entries);

# grpid_s
# generates group-id string from groupId
def grpid_s:
  . | @text "\(.locationId)/\(.superGroupId)/\(.subGroupId)";

# pretty brm
def pretty_brm:
  (.
   | {csn: .value.contentSequenceNumber,
      cid: .key.compositeContentId.contentId,
      rsn: .key.representationSequenceNumber,
      lsz: .value.logicalBytes,
      r: [.value.references[].refType],
      p: .value.patchId.patchId,
      b:
        (if (.value.baseRef) then
          .value.baseRef
          | {rsn: .representationSequenceNumber,
             c: (.compositeContentId
                 | {cid: .contentId,
                    g: (.groupId | grpid_s)})}
        else
          null
        end)});

# brm_nice
# make a nice looking blob-representation-map
def brm_nice:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson}
     | pretty_brm);

# brm_verbose
# make a nice looking blob-representation-map
def brm_verbose:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson, ksn: .key});

# given brm_verbose output
def find_base(ksn):
  map(. | select(.ksn == ksn));

def find_base_rec(ksn):
  (. as $brm | find_base(ksn) as $i
             | if (($i | length) == 0) then
                 []
               else
                 ($i | map(pretty_brm)) +
                   ($i | [map(. | .value.baseRef | tojson as $pksn
                                | $brm | find_base_rec($pksn))[][]])
               end);

# maddr
# map add recursively
#  input:
#   $ echo '[{"foo": 10, "bar": {"a": 1}},
#            {"foo": 4, "quux": 1, "bar": {"a": 2}}]' | jq '. | maddr'
#  output:
#   {"bar": {"a": 3}, "foo": 14, "quux": 1}
def maddr:
  reduce .[] as $m (
    {};
    . as $i | ($i + $m) as $u
            | $u
            | keys
            | map(. as $k | $k
                          | $u[.]
                          | (if (type == "object") then
                               [$i[$k], $m[$k]] | maddr
                             elif (type == "number") then
                               ($i[$k] // 0) + ($m[$k] // 0)
                             elif (type == "array") then
                               [$i + $m] | flatten(1)
                             else
                               error("maddr does not support this type")
                             end) as $v
                          | {key: $k, value: $v})
            | from_entries);


# load_dcbs_csv
# invoke as in $ cat dcbs.csv | qcsv 2 10 17 | jq '. | dcbs_csv_cols'
def load_dcbs_csv:
  . | {
      brm: .[0] | fromjson,
      hm:  .[1] | fromjson,
      pm:  .[2] | fromjson};

# tib
def tib:
  ./1024/1024/1024/1024;

# tb
def tb:
  ./1000/1000/1000/1000;

# verbose representation of sharded-group
def scg_verbose:
  .
  | .content_map=(
        .content_map
        | fromjson
        | with_entries({
          key: .key | fromjson | .id,
          value: .value | fromjson}))
  | del(.recent_unique_strings);

def sq2d:
  . | gsub("'"; "\"");

def ne_json(expr):
    if (. == null or . == "" or (. | fromjson | length) == 0) then . else (. | fromjson | expr) end;

def cm_nice:
  .
  | with_entries({key: .key | fromjson.id, value: .value | fromjson});


def dq2s:
  . | gsub("\""; "'");


def paren_array:
  . | @text "\(.)" | gsub("\\["; "(") | gsub("\\]"; ")");

def find_rsn_base_rec(rsn):
  . as $bv
  | $bv
  | map(select(.key.representationSequenceNumber == rsn))
  | .[0].ksn as $ksn
  | $bv
  | find_base_rec($ksn);