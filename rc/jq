# intersect 2 sets, passed as 2 members of an array eg.
#  input:
#   $ echo '[[1, 2, 3, 4], [5, 6, 4, 1]]' | jq '. | intersect'
#  output:
#  [1, 4]
def intersect:
    (.[0] | unique) + (.[1] | unique) | sort as $s
    | reduce range(1; $s|length) as $i
        ([]; if $s[$i-1]  == $s[$i] then (. + [$s[$i]]) else . end);

# merge multiple maps in an array into 1 big map
#  input:
#   $ echo '[{"foo": 1}, {"bar": 2}]' | jq '. | merge'
#  output:
#   {"foo": 1, "bar": 2}
def merge: reduce .[] as $sub_map ({}; . + $sub_map);

# make a map with some given value with keys from given array
#  input:
#   $ echo '["foo", "bar"]' | jq '. | mapify(5)'
#  output:
#   {"foo": 5, "bar": 5}
def mapify(v): reduce .[] as $str ({}; . + {($str): v});

# find value of a key recursively
#  input:
#   $ echo '[{"a": {"b" : 4}}, {"c" : {"d": 16}}]' | jq '. | find(.d)'
#  output:
#   16
def find(f): .. | select(type=="object" and f) | f;

# pm_nice
# makes a nice looking compact representation of patch_map
def pm_nice:
  (. | fromjson | to_entries
     | map({key: .key | fromjson | .patchId, value: .value | fromjson})
     | from_entries);

# brm_nice
# make a nice looking blob-representation-map
def brm_nice:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson}
     | {csn: .value.contentSequenceNumber,
        cid: .key.compositeContentId.contentId,
        rsn: .key.representationSequenceNumber,
        lsz: .value.logicalBytes,
        r: [.value.references[].refType],
        p: .value.patchId.patchId,
        b: .value.baseRef});

# brm_verbose
# make a nice looking blob-representation-map
def brm_verbose:
  (. | fromjson | to_entries[]
     | {key: .key | fromjson, value: .value | fromjson, ksn: .key});

# given brm_verbose output
def find_base(ksn):
  map(. | select(.ksn == ksn));

def find_base_rec(ksn):
  (. as $brm | find_base(ksn) as $i
             | if (($i | length) == 0) then
                 []
               else
               $i + ($i | [map(. | .value.baseRef | tojson as $pksn
                                 | $brm | find_base_rec($pksn))[][]])
               end);
