define f(n) {
  auto s, m
  if (n <= 0) {
    "Invalid input: "
    n
    return(-1)
  }
  s = scale
  scale = 0
  m = n / 1
  scale = s
  if (n != m) {
    "Invalid input: "
    n
    return(-1)
  }
  if (n < 2) return(1)
  return(n * f(n - 1))
}

# ctx: blobstore-random-ops-test
# running time of single blobstore-random-op (on my laptop)
# can be used as `nCr * r! * (r + f) * bs_random_op_runtime_sec`
# where r is number of randomly chosen ops and f is number of
# fixed ops
bs_random_op_runtime_sec=.07430555555555555555

define flr(x) {
  auto s
  s = scale
  scale = 0
  x /= 1   /* round x down */
  scale = s
  return (x)
}

define ceil(x) {
  auto s, y
  s = scale
  scale = 0
  y = x / 1
  scale = s
  if (y < x) {
     return(y + 1)
  }
  return(y)
}

define mod(x, y) {
  auto q
  q = flr(x / y)
  return(x - q * y)
}

define min_sec(sec) {
  auto m
  m = flr(sec / 60)
  print m, "m ", mod(sec, 60), "s\n"
}

define mins(hrs, mins) {
  return(mins + hrs * 60)
}

define secs(mins, secs) {
  return(secs + mins * 60)
}

define hr_min(min) {
  auto h
  h = flr(min / 60)
  print h, "h ", mod(min, 60), "m\n"
}

define hr_min_sec(sec) {
  auto h, m
  m = flr(sec / 60)
  h = flr(m / 60)
  print h, "h ", mod(m, 60), "m ", mod(sec, 60), "s\n"
}

define hms(sec) {
  auto ign
  ign = hr_min_sec(sec)
}

define b2hu(x, k, b) {
  auto s, y
  s = scale
  scale = 2
  y = x
  if (k > 0) {
    y = b2hu(y / b, k - 1, b)
  }
  scale = s
  return (y)
}

define b2tib(x) {
  return b2hu(x, 40, 2)
}

define b2gib(x) {
  return b2hu(x, 30, 2)
}

define b2mib(x) {
  return b2hu(x, 20, 2)
}

define b2kib(x) {
  return b2hu(x, 10, 2)
}

define b2tb(x) {
  return b2hu(x, 12, 10)
}

define b2gb(x) {
  return b2hu(x, 9, 10)
}

define b2mb(x) {
  return b2hu(x, 6, 10)
}

define b2kb(x) {
  return b2hu(x, 3, 10)
}

define tb2tib(x) {
  return b2tib(x*1000*1000*1000*1000)
}

define div(x, y) {
  auto q, r
  q = flr(x / y)
  r = x - (q * y)
  print q, "r", r, "\n"
}

define p(n, k) {
  return (f(n)/f(n-k))
}

define c(n, k) {
  return p(n, k)/f(k)
}