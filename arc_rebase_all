#!/bin/bash

set -e

git rebase-stacked
if [ "x$1" != 'xlocal' ]; then
   arc diff --message=Rebase
fi

curr_br=$(git rev-parse --abbrev-ref HEAD)

if [ "x$rebase_upto" == "x$curr_br" ]; then
    echo "Reached rebase-target, stopping."
    exit 0
fi

if [[ "$*" == *"update"* ]]; then
    # extract all arguments other than --update
    args=$(echo "$@" | sed 's/--update//g' | xargs)
    # prompt user to enter a string
    read -p 'Enter Diff ID for "arc diff --update": ' diff_ID
    # run arc diff --update with diff_ID and all other arguments
    if [[ "$*" == *"nounit"* && "$*" == *"nolint"* ]]; then
        arc_cmd="arc diff --update $diff_ID $args"
        expect -c "spawn $arc_cmd; expect \"Provide explanation for skipping lint: \"; send \"linted\r\"; expect \"Provide explanation for skipping unit tests or press Enter to abort: \"; send \"tested\r\"; interact"
    else
        arc diff --update "$diff_ID" $args
    fi
else
    if [[ "$*" == *"nounit"* && "$*" == *"nolint"* ]]; then
        arc_cmd="arc diff $*"
        expect -c "spawn $arc_cmd; expect \"Provide explanation for skipping lint: \"; send \"linted\r\"; expect \"Provide explanation for skipping unit tests or press Enter to abort: \"; send \"tested\r\"; interact"
    else
        arc diff "$@"
    fi
fi

br=$(git first-downstream)
if [ "x$br" == "xnull" ]; then
    echo "Done"
else
    git co $br
    exec $0 "$@"
fi
